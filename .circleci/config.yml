version: 2.1

orbs:
  azure-cli: circleci/azure-cli@1.1.0

references:
  # every push on master
  staging_only: &staging_only
    filters:
      branches:
        only:
          - master

  # every time some branch is tagged with 'latest'
  production_only: &production_only
    filters:
      branches:
        ignore: /.*/
      tags:
        only:
          - latest

executors:
  docker-nodejs:
    # environment:
    docker:
      - image: circleci/node:10.14.1

commands:
  install_node_modules:
    steps:
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "yarn.lock" }}
      - run: yarn install --cache-folder ~/.cache/yarn --frozen-lockfile --no-progress --non-interactive
  save_node_cache:
    steps:
      - save_cache:
          paths:
            - ~/.cache/yarn
          key: v1-dependencies-{{ checksum "yarn.lock" }}

jobs:
  compile:
    executor: docker-nodejs
    # environment:
    steps:
      - checkout
      - install_node_modules
      - save_node_cache
      - run: yarn generate
      - run: yarn build

  tests:
    executor: docker-nodejs
    steps:
      - checkout
      - install_node_modules
      - run: yarn generate
      - run: yarn test
      - run: "bash <(curl -s https://codecov.io/bash)"

  lint:
    executor: docker-nodejs
    steps:
      - checkout
      - install_node_modules
      - run: yarn lint

  lint-api:
    executor: docker-nodejs
    steps:
      - checkout
      - run: yarn add oval
      - run: yarn oval validate -p openapi/index.yaml

  danger:
    executor: docker-nodejs
    steps:
      - checkout
      - install_node_modules
      - run: '[ -z "$DANGER_GITHUB_API_TOKEN" ] || yarn danger ci'

  prepare-deploy:
    executor: docker-nodejs
    steps:
      - checkout
      - install_node_modules
      - run: yarn predeploy
      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory. This is a directory on the container which is 
          # taken to be the root directory of the workspace.
          root: .
          # Must be relative path from root
          paths:
            - dist.zip

  deploy:
    executor: azure-cli/default
    steps:
      - run:
          # merely we cannot use environment variables for circleci "when" conditions
          name: Check for environment variables to be set
          command: |
            if [[ -z "${STAGING_RESOURCE_GROUP_NAME}" && -z "${PRODUCTION_RESOURCE_GROUP_NAME}" ]]
            then
              echo Set up environment variables first if you want to start a new deploy
              circleci-agent step halt
            fi
      - azure-cli/install
      - azure-cli/login-with-service-principal
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: /tmp
      - run:
          name: Deploy to function app
          command: |
            az account set --subscription ${AZURE_SUBSCRIPTION_ID}

            if [[ "${CIRCLE_TAG}" == "latest" && -n "${PRODUCTION_RESOURCE_GROUP_NAME}" ]]
            then
              # production settings
              echo "Deploying to production..."
              export RESOURCE_GROUP_NAME="${PRODUCTION_RESOURCE_GROUP_NAME}"
            elif [[ "${CIRCLE_BRANCH}" == "master" && -n "${STAGING_RESOURCE_GROUP_NAME}" ]]
            then
              # staging settings
              echo "Deploying to staging..."
              export RESOURCE_GROUP_NAME="${STAGING_RESOURCE_GROUP_NAME}"
            fi
            az functionapp deployment source config-zip -g ${RESOURCE_GROUP_NAME} -n ${FUNCTION_APP_NAME} --src /tmp/dist.zip

# CircleCI skips a job for a tag by default.
# A job must have a filters tags section to run as a part of a tag push
# and all its transitively dependent jobs must also have a filters tags section.
workflows:
  build-and-test:
    jobs:
      - compile
      - tests
      - lint
      - lint-api
      - danger:
          filters:
            branches:
              ignore: master

  deploy-to-staging:
    jobs:
      - prepare-deploy:
          <<: *staging_only
      - deploy:
          <<: *staging_only
          requires:
            - prepare-deploy

  deploy-to-production:
    jobs:
      - prepare-deploy:
          <<: *production_only
      - deploy:
          <<: *production_only
          requires:
            - prepare-deploy
